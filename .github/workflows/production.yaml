# This workflow is triggered on push to the main branch and deploys the production environment to Vercel

name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Create GitHub Deployment
        id: create_deployment
        uses: peter-evans/create-or-update-deployment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          description: "Production deployment"
          ref: ${{ github.ref }}
          required_contexts: []

      - name: Deploy Project Artifacts
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --env VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }} --env VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }})
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Update GitHub Deployment Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${steps.create_deployment.outputs.deployment_id},
              state: 'success',
              environment_url: process.env.DEPLOYMENT_URL,
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment finished successfully.',
              auto_inactive: true
            });
