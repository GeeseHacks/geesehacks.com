name: Cleanup Old Deployments

on:
  schedule:
    - cron: '0 0 * * 0' # Runs every Sunday at midnight UTC
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Clean up old deployments
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          # Define the age limit (in days)
          AGE_LIMIT_DAYS=7

          # Get the current date in seconds since epoch
          current_date=$(date +%s)

          # List all deployments
          deployments=$(vercel list $VERCEL_PROJECT_NAME --confirm --scope $VERCEL_ORG_ID --token $VERCEL_TOKEN --output=json)

          # Get the current production deployment UID
          current_prod_deployment=$(echo $deployments | jq -r '.deployments[] | select(.target == "production" and .state == "READY") | .uid')

          # Iterate over the deployments and delete the old ones
          for row in $(echo "${deployments}" | jq -r '.deployments[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            uid=$(_jq '.uid')
            created_at=$(_jq '.createdAt')
            target=$(_jq '.target')

            # Calculate the deployment age in days
            deployment_age_days=$(( (current_date - (created_at / 1000)) / 86400 ))

            # Delete the deployment if it is older than the age limit and not the current production deployment
            if [ $deployment_age_days -gt $AGE_LIMIT_DAYS ] && [ "$uid" != "$current_prod_deployment" ]; then
              echo "Deleting deployment: $uid (Age: $deployment_age_days days, Target: $target)"
              vercel rm $uid --yes --token $VERCEL_TOKEN
            fi
          done
